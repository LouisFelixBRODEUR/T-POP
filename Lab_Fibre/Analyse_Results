# pip install numpy matplotlib pillow scipy
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import os
from scipy.optimize import curve_fit


# List of files to process
Hautement_Multimode_path = os.path.dirname(os.path.abspath(__file__))+"\\Lumi_Hautement_Multimode_Crop.tif",
Legerement_Multimode_path = os.path.dirname(os.path.abspath(__file__))+"\\Lumi_Legerement_Multimode_Crop.tif",
Monomode_path = os.path.dirname(os.path.abspath(__file__))+"\\Lumi_Monomode_Crop.tif"

file = Monomode_path

img = Image.open(file)
data = np.array(img)

# Find 3D center
x_range=(120, 210)
y_range=(120, 210)
sliced_data = data[y_range[0]:y_range[1], x_range[0]:x_range[1]]
max_row_positions = np.argmax(sliced_data, axis=1)
max_col_positions = np.argmax(sliced_data, axis=0)
avg_x = np.mean(max_row_positions) + x_range[0]
avg_y = np.mean(max_col_positions) + y_range[0]
center =  avg_x, avg_y

# Center the data
center_row, center_col = center[1],center[0]
num_rows, num_cols = data.shape
max_row_distance = min(center_row, num_rows - 1 - center_row)
max_col_distance = min(center_col, num_cols - 1 - center_col)
submatrix_size_rows = 2 * max_row_distance + 1
submatrix_size_cols = 2 * max_col_distance + 1
start_row = int(center_row - max_row_distance)
end_row = int(center_row + max_row_distance + 1)
start_col = int(center_col - max_col_distance)
end_col = int(center_col + max_col_distance + 1)
centered_data = data[start_row:end_row, start_col:end_col]

title = file.split('\\')[-1]
# # HeatMap
# plt.figure(figsize=(8, 6))
# plt.imshow(data, cmap='hot', interpolation='nearest')
# plt.colorbar()
# plt.scatter(center[0], center[1], color='green', marker='X', s=100, label='Center')
# plt.title(f'Heatmap - {title} NOT CENTERED')
# # HeatMap
# plt.figure(figsize=(8, 6))
# plt.imshow(centered_data, cmap='hot', interpolation='nearest')
# plt.colorbar()
# plt.scatter(len(centered_data[0])//2, len(centered_data)//2, color='green', marker='X', s=100, label='Center')
# plt.title(f'Heatmap - {title}')
# plt.show()

# profil radial de la gaussian
gaussian_image = centered_data
size_x, size_y = len(centered_data[0]), len(centered_data)
center_x, center_y = size_x//2, size_y//2
x = np.arange(size_x) - center_x
y = np.arange(size_y) - center_y
xx, yy = np.meshgrid(x, y)
r = np.sqrt(xx**2 + yy**2)  # Radial distance from the center
theta = np.arctan2(yy, xx)  # Angle in radians (-pi to pi)
r_flat = r.flatten()
theta_flat = theta.flatten()
intensity_flat = gaussian_image.flatten()
r_max = np.max(r)
r_bins = np.linspace(0, r_max, 100)  # Adjust the number of bins as needed
r_bin_centers = (r_bins[:-1] + r_bins[1:]) / 2  # Center of each bin
bin_indices = np.digitize(r_flat, r_bins)
radial_profile = np.array([intensity_flat[bin_indices == i].mean() for i in range(1, len(r_bins))])
r_combined = np.concatenate([-r_bin_centers[::-1], r_bin_centers])
intensity_combined = np.concatenate([radial_profile[::-1], radial_profile])  # Reverse intensity

# Cut Edges
r_min = -210
r_max = 210
mask = (r_combined >= r_min) & (r_combined <= r_max)
# Apply the mask to filter r_combined and intensity_combined
r_combined = r_combined[mask]
intensity_combined = intensity_combined[mask]

# drop_data_to make tendre vers 0
intensity_combined = intensity_combined-22.8

# IntensitÃ© relative
intensity_combined = intensity_combined/np.max(intensity_combined)

# Fit
def gaussian(r, A1, w1):
    return A1 * np.exp(-r**2 / (2 * w1**2))
# Gauss 1
bounds = ([0.99,0],[1.01,35])
initial_guess = [1.0, 20.0]
popt, pcov = curve_fit(gaussian, r_combined, intensity_combined, bounds=bounds, p0=initial_guess)
A1_fit, sigma1_fit = popt
r_fit = np.linspace(min(r_combined), max(r_combined), 500)
# print(A1_fit)
# print(sigma1_fit)
fit_curve_gauss1 = gaussian(r_fit, *popt)
# # Gauss 2
# bounds = ([0.3,50],[0.5,100])
# initial_guess = [0.4, 60]
# popt, pcov = curve_fit(gaussian, r_combined, intensity_combined, bounds=bounds, p0=initial_guess)
# A2_fit, sigma2_fit = popt
# print(A2_fit)
# print(sigma2_fit)
# fit_curve_gauss2 = gaussian(r_fit, *popt)
# fit_curve_gauss2 = gaussian(r_fit, 0.45, 80)

# Affichage du rÃ©sultat
plt.figure(figsize=(10, 5))
plt.plot(r_combined, intensity_combined, label="Profil radial", linestyle="-", c='blue')
plt.plot(r_fit, fit_curve_gauss1, label="Fit gaussienne 1", linestyle="--", c='green')
# plt.plot(r_fit, fit_curve_gauss2, label="Fit gaussienne 2", linestyle="--", c='red')
plt.xlabel("Distance radiale (pixels)")
plt.ylabel("IntensitÃ© normalisÃ©e")
plt.legend()
plt.grid()
plt.show()